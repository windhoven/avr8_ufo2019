
Ufo2019_M32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000096c  00000a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800122  00800122  00000a42  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  00000a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a47  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000118  00000000  00000000  00000ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012d0  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000930  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a6b  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005e2  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007a1  00000000  00000000  0000397e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0000411f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 46 02 	call	0x48c	; 0x48c <main>
  9e:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z10USART_Initj>:
}


uint8_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));
}
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ae:	80 e9       	ldi	r24, 0x90	; 144
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ba:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <data_count>
  be:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <command_ready>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ignore>
  c8:	08 95       	ret

000000ca <__vector_18>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  e2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e6:	9f b7       	in	r25, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Buffer+0x24>
  ee:	9f bf       	out	0x3f, r25	; 63
  f0:	80 32       	cpi	r24, 0x20	; 32
  f2:	b9 f0       	breq	.+46     	; 0x122 <__vector_18+0x58>
  f4:	e6 e3       	ldi	r30, 0x36	; 54
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	a0 a1       	ldd	r26, Z+32	; 0x20
  fa:	b1 a1       	ldd	r27, Z+33	; 0x21
  fc:	2c 93       	st	X, r18
  fe:	80 a1       	ldd	r24, Z+32	; 0x20
 100:	91 a1       	ldd	r25, Z+33	; 0x21
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	91 a3       	std	Z+33, r25	; 0x21
 106:	80 a3       	std	Z+32, r24	; 0x20
 108:	86 55       	subi	r24, 0x56	; 86
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	11 f4       	brne	.+4      	; 0x112 <__vector_18+0x48>
 10e:	f1 a3       	std	Z+33, r31	; 0x21
 110:	e0 a3       	std	Z+32, r30	; 0x20
 112:	9f b7       	in	r25, 0x3f	; 63
 114:	f8 94       	cli
 116:	e6 e3       	ldi	r30, 0x36	; 54
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	84 a1       	ldd	r24, Z+36	; 0x24
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	84 a3       	std	Z+36, r24	; 0x24
 120:	9f bf       	out	0x3f, r25	; 63
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_Z11iUpDownCalch>:

void iUpDownCalc(uint8_t ix) {
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	if (command_ready == false && ledData[ix].ledMode == 1) { // if command_ready == true then these values will be manipulated elsewhere.
 13e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <command_ready>
 142:	91 11       	cpse	r25, r1
 144:	6b c0       	rjmp	.+214    	; 0x21c <_Z11iUpDownCalch+0xe2>
 146:	c8 2f       	mov	r28, r24
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	fe 01       	movw	r30, r28
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	ec 5f       	subi	r30, 0xFC	; 252
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	09 f0       	breq	.+2      	; 0x164 <_Z11iUpDownCalch+0x2a>
 162:	5c c0       	rjmp	.+184    	; 0x21c <_Z11iUpDownCalch+0xe2>
 164:	4d c0       	rjmp	.+154    	; 0x200 <_Z11iUpDownCalch+0xc6>
		if (ledData[ix].waitValue == 0) {
			if (ledData[ix].newValue > ledData[ix].currentValue)	{
 166:	fe 01       	movw	r30, r28
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	ec 5f       	subi	r30, 0xFC	; 252
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	89 17       	cp	r24, r25
 17e:	20 f4       	brcc	.+8      	; 0x188 <_Z11iUpDownCalch+0x4e>
				ledData[ix].currentValue++;
 180:	82 81       	ldd	r24, Z+2	; 0x02
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	82 83       	std	Z+2, r24	; 0x02
 186:	4a c0       	rjmp	.+148    	; 0x21c <_Z11iUpDownCalch+0xe2>
			} else if (ledData[ix].newValue < ledData[ix].currentValue)	{
 188:	fe 01       	movw	r30, r28
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	ec 5f       	subi	r30, 0xFC	; 252
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	82 81       	ldd	r24, Z+2	; 0x02
 19e:	98 17       	cp	r25, r24
 1a0:	20 f4       	brcc	.+8      	; 0x1aa <_Z11iUpDownCalch+0x70>
				ledData[ix].currentValue--;
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	82 83       	std	Z+2, r24	; 0x02
 1a8:	39 c0       	rjmp	.+114    	; 0x21c <_Z11iUpDownCalch+0xe2>
	}
}


uint8_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));
 1aa:	0e 94 08 04 	call	0x810	; 0x810 <rand>
			if (ledData[ix].newValue > ledData[ix].currentValue)	{
				ledData[ix].currentValue++;
			} else if (ledData[ix].newValue < ledData[ix].currentValue)	{
				ledData[ix].currentValue--;
			} else {
				ledData[ix].newValue = myRandomValue(0,10)*10; // 10 steps for pwm
 1ae:	6d ec       	ldi	r22, 0xCD	; 205
 1b0:	7c e0       	ldi	r23, 0x0C	; 12
 1b2:	0e 94 94 03 	call	0x728	; 0x728 <__divmodhi4>
 1b6:	66 0f       	add	r22, r22
 1b8:	86 2f       	mov	r24, r22
 1ba:	88 0f       	add	r24, r24
 1bc:	88 0f       	add	r24, r24
 1be:	68 0f       	add	r22, r24
 1c0:	ce 01       	movw	r24, r28
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	c8 0f       	add	r28, r24
 1cc:	d9 1f       	adc	r29, r25
 1ce:	cc 5f       	subi	r28, 0xFC	; 252
 1d0:	de 4f       	sbci	r29, 0xFE	; 254
 1d2:	69 83       	std	Y+1, r22	; 0x01
	}
}


uint8_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));
 1d4:	0e 94 08 04 	call	0x810	; 0x810 <rand>
 1d8:	65 eb       	ldi	r22, 0xB5	; 181
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	0e 94 94 03 	call	0x728	; 0x728 <__divmodhi4>
 1e0:	6b 5f       	subi	r22, 0xFB	; 251
				ledData[ix].currentValue++;
			} else if (ledData[ix].newValue < ledData[ix].currentValue)	{
				ledData[ix].currentValue--;
			} else {
				ledData[ix].newValue = myRandomValue(0,10)*10; // 10 steps for pwm
				ledData[ix].waitValue = myRandomValue(5,75);
 1e2:	6b 83       	std	Y+3, r22	; 0x03
 1e4:	1b c0       	rjmp	.+54     	; 0x21c <_Z11iUpDownCalch+0xe2>
			}
		} else {
			ledData[ix].waitValue--;
 1e6:	ce 01       	movw	r24, r28
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	c8 0f       	add	r28, r24
 1f2:	d9 1f       	adc	r29, r25
 1f4:	cc 5f       	subi	r28, 0xFC	; 252
 1f6:	de 4f       	sbci	r29, 0xFE	; 254
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
}
 1fe:	0e c0       	rjmp	.+28     	; 0x21c <_Z11iUpDownCalch+0xe2>
	return ibase +(rand() / (RAND_MAX / irand + 1));
}

void iUpDownCalc(uint8_t ix) {
	if (command_ready == false && ledData[ix].ledMode == 1) { // if command_ready == true then these values will be manipulated elsewhere.
		if (ledData[ix].waitValue == 0) {
 200:	fe 01       	movw	r30, r28
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	ec 5f       	subi	r30, 0xFC	; 252
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	83 81       	ldd	r24, Z+3	; 0x03
 214:	88 23       	and	r24, r24
 216:	09 f4       	brne	.+2      	; 0x21a <_Z11iUpDownCalch+0xe0>
 218:	a6 cf       	rjmp	.-180    	; 0x166 <_Z11iUpDownCalch+0x2c>
 21a:	e5 cf       	rjmp	.-54     	; 0x1e6 <_Z11iUpDownCalch+0xac>
			}
		} else {
			ledData[ix].waitValue--;
		}
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	6f 93       	push	r22
 236:	7f 93       	push	r23
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
		if( pwm_phase == 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	50 e0       	ldi	r21, 0x00	; 0

ISR(TIMER2_OVF_vect)
{
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
		if( pwm_phase == 100)
 248:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <pwm_phase>
 24c:	24 36       	cpi	r18, 0x64	; 100
 24e:	d9 f4       	brne	.+54     	; 0x286 <__vector_9+0x64>
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
 250:	9c 01       	movw	r18, r24
 252:	fc 01       	movw	r30, r24
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	e8 0f       	add	r30, r24
 25e:	f9 1f       	adc	r31, r25
 260:	ec 5f       	subi	r30, 0xFC	; 252
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	60 81       	ld	r22, Z
 266:	65 30       	cpi	r22, 0x05	; 5
 268:	08 f4       	brcc	.+2      	; 0x26c <__vector_9+0x4a>
 26a:	5a c0       	rjmp	.+180    	; 0x320 <__vector_9+0xfe>
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	e8 0f       	add	r30, r24
 278:	f9 1f       	adc	r31, r25
 27a:	ec 5f       	subi	r30, 0xFC	; 252
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	60 81       	ld	r22, Z
 280:	68 30       	cpi	r22, 0x08	; 8
 282:	b0 f1       	brcs	.+108    	; 0x2f0 <__vector_9+0xce>
 284:	4d c0       	rjmp	.+154    	; 0x320 <__vector_9+0xfe>
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
			}
		}
		if( ledData[i].currentValue == pwm_phase && pwm_phase != 100)
 286:	9c 01       	movw	r18, r24
 288:	fc 01       	movw	r30, r24
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	ec 5f       	subi	r30, 0xFC	; 252
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	72 81       	ldd	r23, Z+2	; 0x02
 29c:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <pwm_phase>
 2a0:	76 13       	cpse	r23, r22
 2a2:	14 c0       	rjmp	.+40     	; 0x2cc <__vector_9+0xaa>
 2a4:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <pwm_phase>
 2a8:	64 36       	cpi	r22, 0x64	; 100
 2aa:	09 f0       	breq	.+2      	; 0x2ae <__vector_9+0x8c>
 2ac:	51 c0       	rjmp	.+162    	; 0x350 <__vector_9+0x12e>
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <__vector_9+0xaa>
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
 2b0:	f9 01       	movw	r30, r18
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	e2 0f       	add	r30, r18
 2bc:	f3 1f       	adc	r31, r19
 2be:	ec 5f       	subi	r30, 0xFC	; 252
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	60 81       	ld	r22, Z
 2c4:	68 30       	cpi	r22, 0x08	; 8
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <__vector_9+0xa8>
 2c8:	51 c0       	rjmp	.+162    	; 0x36c <__vector_9+0x14a>
 2ca:	66 c0       	rjmp	.+204    	; 0x398 <__vector_9+0x176>
 2cc:	01 96       	adiw	r24, 0x01	; 1
}

ISR(TIMER2_OVF_vect)
{
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
 2ce:	86 30       	cpi	r24, 0x06	; 6
 2d0:	91 05       	cpc	r25, r1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <__vector_9+0xb4>
 2d4:	b9 cf       	rjmp	.-142    	; 0x248 <__vector_9+0x26>
				} else {
				PORTB |= (1<< ledData[i].ledPin); // LED aan
			}
		}
	}
	if (pwm_phase == 100) {
 2d6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <pwm_phase>
 2da:	84 36       	cpi	r24, 0x64	; 100
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <__vector_9+0xc2>
		pwm_phase = 0;
 2de:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <pwm_phase>
 2e2:	70 c0       	rjmp	.+224    	; 0x3c4 <__vector_9+0x1a2>
	} else {
		pwm_phase++;
 2e4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <pwm_phase>
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pwm_phase>
	}
	// end pwm leds
}
 2ee:	6a c0       	rjmp	.+212    	; 0x3c4 <__vector_9+0x1a2>
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
		if( pwm_phase == 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
 2f0:	fc 01       	movw	r30, r24
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	2e 0f       	add	r18, r30
 2fc:	3f 1f       	adc	r19, r31
 2fe:	f9 01       	movw	r30, r18
 300:	ec 5f       	subi	r30, 0xFC	; 252
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	20 81       	ld	r18, Z
 306:	6b b1       	in	r22, 0x0b	; 11
 308:	fa 01       	movw	r30, r20
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_9+0xee>
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	2a 95       	dec	r18
 312:	e2 f7       	brpl	.-8      	; 0x30c <__vector_9+0xea>
 314:	9f 01       	movw	r18, r30
 316:	20 95       	com	r18
 318:	30 95       	com	r19
 31a:	26 23       	and	r18, r22
 31c:	2b b9       	out	0x0b, r18	; 11
 31e:	b3 cf       	rjmp	.-154    	; 0x286 <__vector_9+0x64>
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
 320:	f9 01       	movw	r30, r18
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	2e 0f       	add	r18, r30
 32c:	3f 1f       	adc	r19, r31
 32e:	f9 01       	movw	r30, r18
 330:	ec 5f       	subi	r30, 0xFC	; 252
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	20 81       	ld	r18, Z
 336:	65 b1       	in	r22, 0x05	; 5
 338:	fa 01       	movw	r30, r20
 33a:	02 c0       	rjmp	.+4      	; 0x340 <__vector_9+0x11e>
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	2a 95       	dec	r18
 342:	e2 f7       	brpl	.-8      	; 0x33c <__vector_9+0x11a>
 344:	9f 01       	movw	r18, r30
 346:	20 95       	com	r18
 348:	30 95       	com	r19
 34a:	26 23       	and	r18, r22
 34c:	25 b9       	out	0x05, r18	; 5
 34e:	9b cf       	rjmp	.-202    	; 0x286 <__vector_9+0x64>
			}
		}
		if( ledData[i].currentValue == pwm_phase && pwm_phase != 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
 350:	fc 01       	movw	r30, r24
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e8 0f       	add	r30, r24
 35c:	f9 1f       	adc	r31, r25
 35e:	ec 5f       	subi	r30, 0xFC	; 252
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	60 81       	ld	r22, Z
 364:	65 30       	cpi	r22, 0x05	; 5
 366:	08 f0       	brcs	.+2      	; 0x36a <__vector_9+0x148>
 368:	a3 cf       	rjmp	.-186    	; 0x2b0 <__vector_9+0x8e>
 36a:	16 c0       	rjmp	.+44     	; 0x398 <__vector_9+0x176>
				PORTD |= (1<< ledData[i].ledPin); // LED aan
 36c:	f9 01       	movw	r30, r18
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	2e 0f       	add	r18, r30
 378:	3f 1f       	adc	r19, r31
 37a:	f9 01       	movw	r30, r18
 37c:	ec 5f       	subi	r30, 0xFC	; 252
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	20 81       	ld	r18, Z
 382:	6b b1       	in	r22, 0x0b	; 11
 384:	fa 01       	movw	r30, r20
 386:	02 c0       	rjmp	.+4      	; 0x38c <__vector_9+0x16a>
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <__vector_9+0x166>
 390:	9f 01       	movw	r18, r30
 392:	26 2b       	or	r18, r22
 394:	2b b9       	out	0x0b, r18	; 11
 396:	9a cf       	rjmp	.-204    	; 0x2cc <__vector_9+0xaa>
				} else {
				PORTB |= (1<< ledData[i].ledPin); // LED aan
 398:	f9 01       	movw	r30, r18
 39a:	ee 0f       	add	r30, r30
 39c:	ff 1f       	adc	r31, r31
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	2e 0f       	add	r18, r30
 3a4:	3f 1f       	adc	r19, r31
 3a6:	f9 01       	movw	r30, r18
 3a8:	ec 5f       	subi	r30, 0xFC	; 252
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	20 81       	ld	r18, Z
 3ae:	65 b1       	in	r22, 0x05	; 5
 3b0:	fa 01       	movw	r30, r20
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__vector_9+0x196>
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	2a 95       	dec	r18
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <__vector_9+0x192>
 3bc:	9f 01       	movw	r18, r30
 3be:	26 2b       	or	r18, r22
 3c0:	25 b9       	out	0x05, r18	; 5
 3c2:	84 cf       	rjmp	.-248    	; 0x2cc <__vector_9+0xaa>
		pwm_phase = 0;
	} else {
		pwm_phase++;
	}
	// end pwm leds
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_16>:

ISR(TIMER0_OVF_vect)
{			
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	if (tel >=0 && tel < N_LED) {
 404:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tel>
 408:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tel>
 40c:	86 30       	cpi	r24, 0x06	; 6
 40e:	20 f4       	brcc	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		iUpDownCalc(tel);	// Fading from 'color' to 'color'
 410:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tel>
 414:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11iUpDownCalch>
	}
	if (++tel == 9) {
 418:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tel>
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <tel>
 422:	89 30       	cpi	r24, 0x09	; 9
 424:	31 f4       	brne	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		PORTB ^= (1 << PINB3) | (1 << PINB4); // Toggle the LEDs		
 426:	95 b1       	in	r25, 0x05	; 5
 428:	88 e1       	ldi	r24, 0x18	; 24
 42a:	89 27       	eor	r24, r25
 42c:	85 b9       	out	0x05, r24	; 5
		tel = 0;
 42e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <tel>
	}	
}
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <_Z8initrandv>:
void initrand()
{
        uint32_t state;
        static uint32_t EEMEM sstate = 1;

        state = eeprom_read_dword(&sstate);
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 20 04 	call	0x840	; 0x840 <eeprom_read_dword>

        // Check if it's unwritten EEPROM (first time). Use something funny
        // in that case.
        if (state == 0xffffffUL)
 45c:	6f 3f       	cpi	r22, 0xFF	; 255
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	72 07       	cpc	r23, r18
 462:	82 07       	cpc	r24, r18
 464:	91 05       	cpc	r25, r1
 466:	21 f4       	brne	.+8      	; 0x470 <_Z8initrandv+0x1c>
                state = 0xDEADBEEFUL;
 468:	6f ee       	ldi	r22, 0xEF	; 239
 46a:	7e eb       	ldi	r23, 0xBE	; 190
 46c:	8d ea       	ldi	r24, 0xAD	; 173
 46e:	9e ed       	ldi	r25, 0xDE	; 222
        srand(state);
 470:	cb 01       	movw	r24, r22
 472:	0e 94 0d 04 	call	0x81a	; 0x81a <srand>
		
		state = !state;
        eeprom_write_dword(&sstate,rand());				
 476:	0e 94 08 04 	call	0x810	; 0x810 <rand>
 47a:	ac 01       	movw	r20, r24
 47c:	99 0f       	add	r25, r25
 47e:	66 0b       	sbc	r22, r22
 480:	77 0b       	sbc	r23, r23
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 26 04 	call	0x84c	; 0x84c <eeprom_write_dword>
 48a:	08 95       	ret

0000048c <main>:
} 

int main(void)
{
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) | (1<<DDB4);
 48c:	84 b1       	in	r24, 0x04	; 4
 48e:	8f 61       	ori	r24, 0x1F	; 31
 490:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD5) | (1<<DDD6) | (1<<DDD7)  ; //(1<<DDB3); // = output
 492:	8a b1       	in	r24, 0x0a	; 10
 494:	80 6e       	ori	r24, 0xE0	; 224
 496:	8a b9       	out	0x0a, r24	; 10
	PORTB &= ~((1<<PINB0) | (1<<PINB1) | (1<<PINB2) | (1<<PINB3) | (1<<PINB4));
 498:	85 b1       	in	r24, 0x05	; 5
 49a:	80 7e       	andi	r24, 0xE0	; 224
 49c:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~((1<<PIND5) | (1<<PIND6) | (1<<PIND7) ); //| (1<<PIND0)
 49e:	8b b1       	in	r24, 0x0b	; 11
 4a0:	8f 71       	andi	r24, 0x1F	; 31
 4a2:	8b b9       	out	0x0b, r24	; 11
	PORTB |= ~(1<<PINB3);
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	87 6f       	ori	r24, 0xF7	; 247
 4a8:	85 b9       	out	0x05, r24	; 5
	
	eAddress = eeprom_read_byte(&deviceConfig);	
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 18 04 	call	0x830	; 0x830 <eeprom_read_byte>
 4b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	
	initrand();	
 4b6:	0e 94 2a 02 	call	0x454	; 0x454 <_Z8initrandv>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4bc:	f8 94       	cli
			{
				Buffer->In    = Buffer->Buffer;
 4be:	e6 e3       	ldi	r30, 0x36	; 54
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	f1 a3       	std	Z+33, r31	; 0x21
 4c4:	e0 a3       	std	Z+32, r30	; 0x20
				Buffer->Out   = Buffer->Buffer;
 4c6:	f3 a3       	std	Z+35, r31	; 0x23
 4c8:	e2 a3       	std	Z+34, r30	; 0x22
				Buffer->Count = 0;
 4ca:	14 a2       	std	Z+36, r1	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4cc:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
 4ce:	c0 e0       	ldi	r28, 0x00	; 0
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Initialize the buffer with the created storage array
	RingBuffer_InitBuffer(&Buffer);
	
	for (uint8_t i=0;i<N_LED;i++) {
		ledData[i].newValue = myRandomValue(0,10)*10;
 4d2:	0d ec       	ldi	r16, 0xCD	; 205
 4d4:	1c e0       	ldi	r17, 0x0C	; 12
	}
}


uint8_t myRandomValue(uint8_t ibase, uint8_t irand) {
	return ibase +(rand() / (RAND_MAX / irand + 1));
 4d6:	0e 94 08 04 	call	0x810	; 0x810 <rand>
	
	// Initialize the buffer with the created storage array
	RingBuffer_InitBuffer(&Buffer);
	
	for (uint8_t i=0;i<N_LED;i++) {
		ledData[i].newValue = myRandomValue(0,10)*10;
 4da:	b8 01       	movw	r22, r16
 4dc:	0e 94 94 03 	call	0x728	; 0x728 <__divmodhi4>
 4e0:	86 2f       	mov	r24, r22
 4e2:	88 0f       	add	r24, r24
 4e4:	98 2f       	mov	r25, r24
 4e6:	99 0f       	add	r25, r25
 4e8:	99 0f       	add	r25, r25
 4ea:	89 0f       	add	r24, r25
 4ec:	fe 01       	movw	r30, r28
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	ec 0f       	add	r30, r28
 4f8:	fd 1f       	adc	r31, r29
 4fa:	ec 5f       	subi	r30, 0xFC	; 252
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	81 83       	std	Z+1, r24	; 0x01
 500:	21 96       	adiw	r28, 0x01	; 1
	initrand();	
	
	// Initialize the buffer with the created storage array
	RingBuffer_InitBuffer(&Buffer);
	
	for (uint8_t i=0;i<N_LED;i++) {
 502:	c6 30       	cpi	r28, 0x06	; 6
 504:	d1 05       	cpc	r29, r1
 506:	39 f7       	brne	.-50     	; 0x4d6 <main+0x4a>
		ledData[i].newValue = myRandomValue(0,10)*10;
	}
	
	// Setup Timer 0
	
	TCCR0A = 0b00000000;   // Normal Mode
 508:	14 bc       	out	0x24, r1	; 36
	TCCR0B =  (1<<CS00) | (1<<CS02);   // Div 1024 Prescaler
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;            // Initial value
 50e:	16 bc       	out	0x26, r1	; 38
	
	// Enable interrupts as needed
	TIMSK0 |= (1<<TOIE0); //(1<<OCIE0A);      // Timer 0 Interrupt	
 510:	ee e6       	ldi	r30, 0x6E	; 110
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	81 60       	ori	r24, 0x01	; 1
 518:	80 83       	st	Z, r24
	
	// Setup Timer 2
	
	TCCR2A = 0b00000000;   // Normal Mode
 51a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B =  (1<<CS21) ;   // Div 1024 Prescaler
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCNT2 = 0;            // Initial value
 524:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

	// Enable interrupts as needed
	TIMSK2 |= (1<<TOIE2); //(1<<OCIE0A);      // Timer 2 Interrupt	
 528:	e0 e7       	ldi	r30, 0x70	; 112
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	81 60       	ori	r24, 0x01	; 1
 530:	80 83       	st	Z, r24
	
	USART_Init(MYUBRR);
 532:	87 e6       	ldi	r24, 0x67	; 103
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10USART_Initj>
	 		
	sei();               // Global Interrupts
 53a:	78 94       	sei
	
	bool endOfCommand = false;
 53c:	f1 2c       	mov	r15, r1
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Count = Buffer->Count;
 53e:	e6 e3       	ldi	r30, 0x36	; 54
 540:	f1 e0       	ldi	r31, 0x01	; 1
		
		if (lastCmdCount >0) {
			lastCmdCount--;
			if (lastCmdCount == 0) {
				for (uint8_t i=0;i<N_LED;i++) {
					ledData[i].ledMode = 1; // Do random value stuff
 542:	a4 e0       	ldi	r26, 0x04	; 4
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	81 e0       	ldi	r24, 0x01	; 1
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
			if (command_in[0] == eAddress && data_count >= 3) { // Set LED values								
 548:	6a e2       	ldi	r22, 0x2A	; 42
 54a:	71 e0       	ldi	r23, 0x01	; 1
				uint8_t iValue = command_in[2];
				uint8_t iPwm = iValue;
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
 54c:	0f 2e       	mov	r0, r31
 54e:	f4 e6       	ldi	r31, 0x64	; 100
 550:	df 2e       	mov	r13, r31
 552:	f0 2d       	mov	r31, r0
					if ( (iLeds & (1 << ix)) != 0) { // iFirst = LEDs
						ledData[ix].newValue = iPwm;
						if (data_count >= 4) {
							if (command_in[3] == 2) {
								ledData[ix].waitValue = 0;
								ledData[ix].ledMode = 2; // 0= manual
 554:	68 94       	set
 556:	99 24       	eor	r9, r9
 558:	91 f8       	bld	r9, 1
						// process command
					} else {						
						data_count  =0;
						ignore = true;						
					}					
					lastCmdCount = 8192;					
 55a:	a1 2c       	mov	r10, r1
 55c:	68 94       	set
 55e:	bb 24       	eor	r11, r11
 560:	b5 f8       	bld	r11, 5
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 562:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 564:	f8 94       	cli
			{
				Count = Buffer->Count;
 566:	94 a1       	ldd	r25, Z+36	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 568:	2f bf       	out	0x3f, r18	; 63
	
    /* Replace with your application code */
    while (1) 
    {				 
		 // Print contents of the buffer one character at a time		 
		 while (RingBuffer_IsEmpty(&Buffer) == false && command_ready == false) {
 56a:	99 23       	and	r25, r25
 56c:	09 f4       	brne	.+2      	; 0x570 <main+0xe4>
 56e:	cd c0       	rjmp	.+410    	; 0x70a <main+0x27e>
 570:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <command_ready>
 574:	33 23       	and	r19, r19
 576:	09 f4       	brne	.+2      	; 0x57a <main+0xee>
 578:	cd c0       	rjmp	.+410    	; 0x714 <main+0x288>
 57a:	c7 c0       	rjmp	.+398    	; 0x70a <main+0x27e>
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 57c:	f3 a3       	std	Z+35, r31	; 0x23
 57e:	e2 a3       	std	Z+34, r30	; 0x22

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 580:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 582:	f8 94       	cli
			{
				Buffer->Count--;
 584:	94 a1       	ldd	r25, Z+36	; 0x24
 586:	91 50       	subi	r25, 0x01	; 1
 588:	94 a3       	std	Z+36, r25	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 58a:	2f bf       	out	0x3f, r18	; 63
			unsigned char c = RingBuffer_Remove(&Buffer);							
			
			if (data_count >= CMD_BUFFER_SIZE) {
 58c:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <data_count>
 590:	cc 30       	cpi	r28, 0x0C	; 12
 592:	28 f0       	brcs	.+10     	; 0x59e <main+0x112>
				// too much data
				endOfCommand = false;
				data_count = 0;
				ignore = true;
 594:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ignore>
			}					
				
			if (data_count == 0 && c == eAddress) { // 255 = Address for programming new Address
 598:	c3 2f       	mov	r28, r19
		 while (RingBuffer_IsEmpty(&Buffer) == false && command_ready == false) {
			unsigned char c = RingBuffer_Remove(&Buffer);							
			
			if (data_count >= CMD_BUFFER_SIZE) {
				// too much data
				endOfCommand = false;
 59a:	f1 2c       	mov	r15, r1
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <main+0x116>
				data_count = 0;
				ignore = true;
			}					
				
			if (data_count == 0 && c == eAddress) { // 255 = Address for programming new Address
 59e:	c1 11       	cpse	r28, r1
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <main+0x122>
 5a2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 5a6:	94 13       	cpse	r25, r20
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <main+0x122>
				// wrong address
				ignore = false;
 5aa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ignore>
			}
			
			command_in[data_count++] = c;	
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	9c 0f       	add	r25, r28
 5b2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <data_count>
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	c6 5d       	subi	r28, 0xD6	; 214
 5ba:	de 4f       	sbci	r29, 0xFE	; 254
 5bc:	48 83       	st	Y, r20
			
			if (c == '\r') { // End of line!		
 5be:	4d 30       	cpi	r20, 0x0D	; 13
 5c0:	91 f4       	brne	.+36     	; 0x5e6 <main+0x15a>
				if (endOfCommand == true) {
 5c2:	ff 20       	and	r15, r15
 5c4:	71 f2       	breq	.-100    	; 0x562 <main+0xd6>
					if (ignore == false) {
 5c6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ignore>
 5ca:	91 11       	cpse	r25, r1
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <main+0x148>
						command_ready = true;
 5ce:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <command_ready>
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <main+0x150>
						// process command
					} else {						
						data_count  =0;
 5d4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <data_count>
						ignore = true;						
 5d8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ignore>
					}					
					lastCmdCount = 8192;					
 5dc:	b0 92 26 01 	sts	0x0126, r11	; 0x800126 <lastCmdCount+0x1>
 5e0:	a0 92 25 01 	sts	0x0125, r10	; 0x800125 <lastCmdCount>
 5e4:	be cf       	rjmp	.-132    	; 0x562 <main+0xd6>
				}				
			} else {
				endOfCommand = false;
			}
			if (c == '\n') { // End of line!
 5e6:	f8 2e       	mov	r15, r24
 5e8:	4a 30       	cpi	r20, 0x0A	; 10
 5ea:	09 f4       	brne	.+2      	; 0x5ee <main+0x162>
 5ec:	ba cf       	rjmp	.-140    	; 0x562 <main+0xd6>
 5ee:	f1 2c       	mov	r15, r1
 5f0:	b8 cf       	rjmp	.-144    	; 0x562 <main+0xd6>
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
			if (command_in[0] == eAddress && data_count >= 3) { // Set LED values								
 5f2:	eb 01       	movw	r28, r22
 5f4:	28 81       	ld	r18, Y
 5f6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 5fa:	29 13       	cpse	r18, r25
 5fc:	5c c0       	rjmp	.+184    	; 0x6b6 <main+0x22a>
 5fe:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <data_count>
 602:	93 30       	cpi	r25, 0x03	; 3
 604:	08 f4       	brcc	.+2      	; 0x608 <main+0x17c>
 606:	57 c0       	rjmp	.+174    	; 0x6b6 <main+0x22a>
				uint8_t iLeds = command_in[1];
 608:	09 81       	ldd	r16, Y+1	; 0x01
				uint8_t iValue = command_in[2];
 60a:	2a 81       	ldd	r18, Y+2	; 0x02
				uint8_t iPwm = iValue;
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
 60c:	25 36       	cpi	r18, 0x65	; 101
 60e:	08 f0       	brcs	.+2      	; 0x612 <main+0x186>
 610:	2d 2d       	mov	r18, r13
 612:	ed 2c       	mov	r14, r13
 614:	e2 1a       	sub	r14, r18
				for (uint8_t ix=0;ix < N_LED;ix++) {
					if ( (iLeds & (1 << ix)) != 0) { // iFirst = LEDs
						ledData[ix].newValue = iPwm;
						if (data_count >= 4) {
							if (command_in[3] == 2) {
 616:	eb 01       	movw	r28, r22
 618:	cb 80       	ldd	r12, Y+3	; 0x03
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	30 e0       	ldi	r19, 0x00	; 0
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
				for (uint8_t ix=0;ix < N_LED;ix++) {
					if ( (iLeds & (1 << ix)) != 0) { // iFirst = LEDs
 61e:	10 e0       	ldi	r17, 0x00	; 0
 620:	a9 01       	movw	r20, r18
 622:	e8 01       	movw	r28, r16
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <main+0x1a0>
 628:	d5 95       	asr	r29
 62a:	c7 95       	ror	r28
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <main+0x19c>
 630:	c0 ff       	sbrs	r28, 0
 632:	3b c0       	rjmp	.+118    	; 0x6aa <main+0x21e>
						ledData[ix].newValue = iPwm;
 634:	e9 01       	movw	r28, r18
 636:	cc 0f       	add	r28, r28
 638:	dd 1f       	adc	r29, r29
 63a:	cc 0f       	add	r28, r28
 63c:	dd 1f       	adc	r29, r29
 63e:	c2 0f       	add	r28, r18
 640:	d3 1f       	adc	r29, r19
 642:	cc 5f       	subi	r28, 0xFC	; 252
 644:	de 4f       	sbci	r29, 0xFE	; 254
 646:	e9 82       	std	Y+1, r14	; 0x01
						if (data_count >= 4) {
 648:	94 30       	cpi	r25, 0x04	; 4
 64a:	c8 f0       	brcs	.+50     	; 0x67e <main+0x1f2>
							if (command_in[3] == 2) {
 64c:	c2 e0       	ldi	r28, 0x02	; 2
 64e:	cc 12       	cpse	r12, r28
 650:	0c c0       	rjmp	.+24     	; 0x66a <main+0x1de>
								ledData[ix].waitValue = 0;
 652:	e9 01       	movw	r28, r18
 654:	cc 0f       	add	r28, r28
 656:	dd 1f       	adc	r29, r29
 658:	cc 0f       	add	r28, r28
 65a:	dd 1f       	adc	r29, r29
 65c:	c2 0f       	add	r28, r18
 65e:	d3 1f       	adc	r29, r19
 660:	cc 5f       	subi	r28, 0xFC	; 252
 662:	de 4f       	sbci	r29, 0xFE	; 254
 664:	1b 82       	std	Y+3, r1	; 0x03
								ledData[ix].ledMode = 2; // 0= manual
 666:	9c 82       	std	Y+4, r9	; 0x04
 668:	0a c0       	rjmp	.+20     	; 0x67e <main+0x1f2>
							} else {
								ledData[ix].ledMode = 1;
 66a:	e9 01       	movw	r28, r18
 66c:	cc 0f       	add	r28, r28
 66e:	dd 1f       	adc	r29, r29
 670:	cc 0f       	add	r28, r28
 672:	dd 1f       	adc	r29, r29
 674:	c2 0f       	add	r28, r18
 676:	d3 1f       	adc	r29, r19
 678:	cc 5f       	subi	r28, 0xFC	; 252
 67a:	de 4f       	sbci	r29, 0xFE	; 254
 67c:	8c 83       	std	Y+4, r24	; 0x04
							}
						}
						if (ledData[ix].ledMode == 2) {
 67e:	ea 01       	movw	r28, r20
 680:	cc 0f       	add	r28, r28
 682:	dd 1f       	adc	r29, r29
 684:	cc 0f       	add	r28, r28
 686:	dd 1f       	adc	r29, r29
 688:	c4 0f       	add	r28, r20
 68a:	d5 1f       	adc	r29, r21
 68c:	cc 5f       	subi	r28, 0xFC	; 252
 68e:	de 4f       	sbci	r29, 0xFE	; 254
 690:	cc 81       	ldd	r28, Y+4	; 0x04
 692:	c2 30       	cpi	r28, 0x02	; 2
 694:	51 f4       	brne	.+20     	; 0x6aa <main+0x21e>
							ledData[ix].currentValue = iPwm;
 696:	ea 01       	movw	r28, r20
 698:	cc 0f       	add	r28, r28
 69a:	dd 1f       	adc	r29, r29
 69c:	cc 0f       	add	r28, r28
 69e:	dd 1f       	adc	r29, r29
 6a0:	c4 0f       	add	r28, r20
 6a2:	d5 1f       	adc	r29, r21
 6a4:	cc 5f       	subi	r28, 0xFC	; 252
 6a6:	de 4f       	sbci	r29, 0xFE	; 254
 6a8:	ea 82       	std	Y+2, r14	; 0x02
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	3f 4f       	sbci	r19, 0xFF	; 255
				uint8_t iPwm = iValue;
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
				for (uint8_t ix=0;ix < N_LED;ix++) {
 6ae:	26 30       	cpi	r18, 0x06	; 6
 6b0:	31 05       	cpc	r19, r1
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <main+0x22a>
 6b4:	b5 cf       	rjmp	.-150    	; 0x620 <main+0x194>
							ledData[ix].currentValue = iPwm;
						}
					}
				}
			}
			data_count =0;						
 6b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <data_count>
			command_ready = false;
 6ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <command_ready>
			ignore = true;
 6be:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ignore>
		}
		
		if (lastCmdCount >0) {
 6c2:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <lastCmdCount>
 6c6:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <lastCmdCount+0x1>
 6ca:	21 15       	cp	r18, r1
 6cc:	31 05       	cpc	r19, r1
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <main+0x246>
 6d0:	48 cf       	rjmp	.-368    	; 0x562 <main+0xd6>
			lastCmdCount--;
 6d2:	21 50       	subi	r18, 0x01	; 1
 6d4:	31 09       	sbc	r19, r1
 6d6:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <lastCmdCount+0x1>
 6da:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <lastCmdCount>
			if (lastCmdCount == 0) {
 6de:	23 2b       	or	r18, r19
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <main+0x258>
 6e2:	3f cf       	rjmp	.-386    	; 0x562 <main+0xd6>
				for (uint8_t i=0;i<N_LED;i++) {
					ledData[i].ledMode = 1; // Do random value stuff
 6e4:	14 96       	adiw	r26, 0x04	; 4
 6e6:	8c 93       	st	X, r24
 6e8:	14 97       	sbiw	r26, 0x04	; 4
 6ea:	19 96       	adiw	r26, 0x09	; 9
 6ec:	8c 93       	st	X, r24
 6ee:	19 97       	sbiw	r26, 0x09	; 9
 6f0:	1e 96       	adiw	r26, 0x0e	; 14
 6f2:	8c 93       	st	X, r24
 6f4:	1e 97       	sbiw	r26, 0x0e	; 14
 6f6:	53 96       	adiw	r26, 0x13	; 19
 6f8:	8c 93       	st	X, r24
 6fa:	53 97       	sbiw	r26, 0x13	; 19
 6fc:	58 96       	adiw	r26, 0x18	; 24
 6fe:	8c 93       	st	X, r24
 700:	58 97       	sbiw	r26, 0x18	; 24
 702:	5d 96       	adiw	r26, 0x1d	; 29
 704:	8c 93       	st	X, r24
 706:	5d 97       	sbiw	r26, 0x1d	; 29
 708:	2c cf       	rjmp	.-424    	; 0x562 <main+0xd6>
			if (c == '\n') { // End of line!
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
 70a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <command_ready>
 70e:	91 30       	cpi	r25, 0x01	; 1
 710:	c1 f6       	brne	.-80     	; 0x6c2 <main+0x236>
 712:	6f cf       	rjmp	.-290    	; 0x5f2 <main+0x166>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 714:	c2 a1       	ldd	r28, Z+34	; 0x22
 716:	d3 a1       	ldd	r29, Z+35	; 0x23
 718:	49 91       	ld	r20, Y+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 71a:	d3 a3       	std	Z+35, r29	; 0x23
 71c:	c2 a3       	std	Z+34, r28	; 0x22
 71e:	c6 55       	subi	r28, 0x56	; 86
 720:	d1 40       	sbci	r29, 0x01	; 1
 722:	09 f0       	breq	.+2      	; 0x726 <main+0x29a>
 724:	2d cf       	rjmp	.-422    	; 0x580 <main+0xf4>
 726:	2a cf       	rjmp	.-428    	; 0x57c <main+0xf0>

00000728 <__divmodhi4>:
 728:	97 fb       	bst	r25, 7
 72a:	07 2e       	mov	r0, r23
 72c:	16 f4       	brtc	.+4      	; 0x732 <__divmodhi4+0xa>
 72e:	00 94       	com	r0
 730:	07 d0       	rcall	.+14     	; 0x740 <__divmodhi4_neg1>
 732:	77 fd       	sbrc	r23, 7
 734:	09 d0       	rcall	.+18     	; 0x748 <__divmodhi4_neg2>
 736:	0e 94 a8 03 	call	0x750	; 0x750 <__udivmodhi4>
 73a:	07 fc       	sbrc	r0, 7
 73c:	05 d0       	rcall	.+10     	; 0x748 <__divmodhi4_neg2>
 73e:	3e f4       	brtc	.+14     	; 0x74e <__divmodhi4_exit>

00000740 <__divmodhi4_neg1>:
 740:	90 95       	com	r25
 742:	81 95       	neg	r24
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <__divmodhi4_neg2>:
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255

0000074e <__divmodhi4_exit>:
 74e:	08 95       	ret

00000750 <__udivmodhi4>:
 750:	aa 1b       	sub	r26, r26
 752:	bb 1b       	sub	r27, r27
 754:	51 e1       	ldi	r21, 0x11	; 17
 756:	07 c0       	rjmp	.+14     	; 0x766 <__udivmodhi4_ep>

00000758 <__udivmodhi4_loop>:
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	a6 17       	cp	r26, r22
 75e:	b7 07       	cpc	r27, r23
 760:	10 f0       	brcs	.+4      	; 0x766 <__udivmodhi4_ep>
 762:	a6 1b       	sub	r26, r22
 764:	b7 0b       	sbc	r27, r23

00000766 <__udivmodhi4_ep>:
 766:	88 1f       	adc	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	5a 95       	dec	r21
 76c:	a9 f7       	brne	.-22     	; 0x758 <__udivmodhi4_loop>
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	bc 01       	movw	r22, r24
 774:	cd 01       	movw	r24, r26
 776:	08 95       	ret

00000778 <do_rand>:
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	ec 01       	movw	r28, r24
 78e:	68 81       	ld	r22, Y
 790:	79 81       	ldd	r23, Y+1	; 0x01
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	9b 81       	ldd	r25, Y+3	; 0x03
 796:	61 15       	cp	r22, r1
 798:	71 05       	cpc	r23, r1
 79a:	81 05       	cpc	r24, r1
 79c:	91 05       	cpc	r25, r1
 79e:	21 f4       	brne	.+8      	; 0x7a8 <do_rand+0x30>
 7a0:	64 e2       	ldi	r22, 0x24	; 36
 7a2:	79 ed       	ldi	r23, 0xD9	; 217
 7a4:	8b e5       	ldi	r24, 0x5B	; 91
 7a6:	97 e0       	ldi	r25, 0x07	; 7
 7a8:	2d e1       	ldi	r18, 0x1D	; 29
 7aa:	33 ef       	ldi	r19, 0xF3	; 243
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__divmodsi4>
 7b4:	49 01       	movw	r8, r18
 7b6:	5a 01       	movw	r10, r20
 7b8:	9b 01       	movw	r18, r22
 7ba:	ac 01       	movw	r20, r24
 7bc:	a7 ea       	ldi	r26, 0xA7	; 167
 7be:	b1 e4       	ldi	r27, 0x41	; 65
 7c0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__muluhisi3>
 7c4:	6b 01       	movw	r12, r22
 7c6:	7c 01       	movw	r14, r24
 7c8:	ac ee       	ldi	r26, 0xEC	; 236
 7ca:	b4 ef       	ldi	r27, 0xF4	; 244
 7cc:	a5 01       	movw	r20, r10
 7ce:	94 01       	movw	r18, r8
 7d0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulohisi3>
 7d4:	dc 01       	movw	r26, r24
 7d6:	cb 01       	movw	r24, r22
 7d8:	8c 0d       	add	r24, r12
 7da:	9d 1d       	adc	r25, r13
 7dc:	ae 1d       	adc	r26, r14
 7de:	bf 1d       	adc	r27, r15
 7e0:	b7 ff       	sbrs	r27, 7
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <do_rand+0x72>
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	a1 09       	sbc	r26, r1
 7e8:	b0 48       	sbci	r27, 0x80	; 128
 7ea:	88 83       	st	Y, r24
 7ec:	99 83       	std	Y+1, r25	; 0x01
 7ee:	aa 83       	std	Y+2, r26	; 0x02
 7f0:	bb 83       	std	Y+3, r27	; 0x03
 7f2:	9f 77       	andi	r25, 0x7F	; 127
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	ff 90       	pop	r15
 7fa:	ef 90       	pop	r14
 7fc:	df 90       	pop	r13
 7fe:	cf 90       	pop	r12
 800:	bf 90       	pop	r11
 802:	af 90       	pop	r10
 804:	9f 90       	pop	r9
 806:	8f 90       	pop	r8
 808:	08 95       	ret

0000080a <rand_r>:
 80a:	0e 94 bc 03 	call	0x778	; 0x778 <do_rand>
 80e:	08 95       	ret

00000810 <rand>:
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 bc 03 	call	0x778	; 0x778 <do_rand>
 818:	08 95       	ret

0000081a <srand>:
 81a:	a0 e0       	ldi	r26, 0x00	; 0
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 822:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 826:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 82a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 82e:	08 95       	ret

00000830 <eeprom_read_byte>:
 830:	f9 99       	sbic	0x1f, 1	; 31
 832:	fe cf       	rjmp	.-4      	; 0x830 <eeprom_read_byte>
 834:	92 bd       	out	0x22, r25	; 34
 836:	81 bd       	out	0x21, r24	; 33
 838:	f8 9a       	sbi	0x1f, 0	; 31
 83a:	99 27       	eor	r25, r25
 83c:	80 b5       	in	r24, 0x20	; 32
 83e:	08 95       	ret

00000840 <eeprom_read_dword>:
 840:	a6 e1       	ldi	r26, 0x16	; 22
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	44 e0       	ldi	r20, 0x04	; 4
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	0c 94 35 04 	jmp	0x86a	; 0x86a <eeprom_read_blraw>

0000084c <eeprom_write_dword>:
 84c:	24 2f       	mov	r18, r20
 84e:	0e 94 44 04 	call	0x888	; 0x888 <eeprom_write_r18>
 852:	25 2f       	mov	r18, r21
 854:	0e 94 44 04 	call	0x888	; 0x888 <eeprom_write_r18>
 858:	0c 94 2e 04 	jmp	0x85c	; 0x85c <eeprom_write_word>

0000085c <eeprom_write_word>:
 85c:	0e 94 43 04 	call	0x886	; 0x886 <eeprom_write_byte>
 860:	27 2f       	mov	r18, r23
 862:	0c 94 44 04 	jmp	0x888	; 0x888 <eeprom_write_r18>

00000866 <eeprom_read_block>:
 866:	dc 01       	movw	r26, r24
 868:	cb 01       	movw	r24, r22

0000086a <eeprom_read_blraw>:
 86a:	fc 01       	movw	r30, r24
 86c:	f9 99       	sbic	0x1f, 1	; 31
 86e:	fe cf       	rjmp	.-4      	; 0x86c <eeprom_read_blraw+0x2>
 870:	06 c0       	rjmp	.+12     	; 0x87e <eeprom_read_blraw+0x14>
 872:	f2 bd       	out	0x22, r31	; 34
 874:	e1 bd       	out	0x21, r30	; 33
 876:	f8 9a       	sbi	0x1f, 0	; 31
 878:	31 96       	adiw	r30, 0x01	; 1
 87a:	00 b4       	in	r0, 0x20	; 32
 87c:	0d 92       	st	X+, r0
 87e:	41 50       	subi	r20, 0x01	; 1
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	b8 f7       	brcc	.-18     	; 0x872 <eeprom_read_blraw+0x8>
 884:	08 95       	ret

00000886 <eeprom_write_byte>:
 886:	26 2f       	mov	r18, r22

00000888 <eeprom_write_r18>:
 888:	f9 99       	sbic	0x1f, 1	; 31
 88a:	fe cf       	rjmp	.-4      	; 0x888 <eeprom_write_r18>
 88c:	1f ba       	out	0x1f, r1	; 31
 88e:	92 bd       	out	0x22, r25	; 34
 890:	81 bd       	out	0x21, r24	; 33
 892:	20 bd       	out	0x20, r18	; 32
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	f8 94       	cli
 898:	fa 9a       	sbi	0x1f, 2	; 31
 89a:	f9 9a       	sbi	0x1f, 1	; 31
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	08 95       	ret

000008a2 <__divmodsi4>:
 8a2:	05 2e       	mov	r0, r21
 8a4:	97 fb       	bst	r25, 7
 8a6:	1e f4       	brtc	.+6      	; 0x8ae <__divmodsi4+0xc>
 8a8:	00 94       	com	r0
 8aa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__negsi2>
 8ae:	57 fd       	sbrc	r21, 7
 8b0:	07 d0       	rcall	.+14     	; 0x8c0 <__divmodsi4_neg2>
 8b2:	0e 94 83 04 	call	0x906	; 0x906 <__udivmodsi4>
 8b6:	07 fc       	sbrc	r0, 7
 8b8:	03 d0       	rcall	.+6      	; 0x8c0 <__divmodsi4_neg2>
 8ba:	4e f4       	brtc	.+18     	; 0x8ce <__divmodsi4_exit>
 8bc:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__negsi2>

000008c0 <__divmodsi4_neg2>:
 8c0:	50 95       	com	r21
 8c2:	40 95       	com	r20
 8c4:	30 95       	com	r19
 8c6:	21 95       	neg	r18
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	4f 4f       	sbci	r20, 0xFF	; 255
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255

000008ce <__divmodsi4_exit>:
 8ce:	08 95       	ret

000008d0 <__negsi2>:
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__muluhisi3>:
 8e0:	0e 94 a5 04 	call	0x94a	; 0x94a <__umulhisi3>
 8e4:	a5 9f       	mul	r26, r21
 8e6:	90 0d       	add	r25, r0
 8e8:	b4 9f       	mul	r27, r20
 8ea:	90 0d       	add	r25, r0
 8ec:	a4 9f       	mul	r26, r20
 8ee:	80 0d       	add	r24, r0
 8f0:	91 1d       	adc	r25, r1
 8f2:	11 24       	eor	r1, r1
 8f4:	08 95       	ret

000008f6 <__mulshisi3>:
 8f6:	b7 ff       	sbrs	r27, 7
 8f8:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__muluhisi3>

000008fc <__mulohisi3>:
 8fc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__muluhisi3>
 900:	82 1b       	sub	r24, r18
 902:	93 0b       	sbc	r25, r19
 904:	08 95       	ret

00000906 <__udivmodsi4>:
 906:	a1 e2       	ldi	r26, 0x21	; 33
 908:	1a 2e       	mov	r1, r26
 90a:	aa 1b       	sub	r26, r26
 90c:	bb 1b       	sub	r27, r27
 90e:	fd 01       	movw	r30, r26
 910:	0d c0       	rjmp	.+26     	; 0x92c <__udivmodsi4_ep>

00000912 <__udivmodsi4_loop>:
 912:	aa 1f       	adc	r26, r26
 914:	bb 1f       	adc	r27, r27
 916:	ee 1f       	adc	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	a2 17       	cp	r26, r18
 91c:	b3 07       	cpc	r27, r19
 91e:	e4 07       	cpc	r30, r20
 920:	f5 07       	cpc	r31, r21
 922:	20 f0       	brcs	.+8      	; 0x92c <__udivmodsi4_ep>
 924:	a2 1b       	sub	r26, r18
 926:	b3 0b       	sbc	r27, r19
 928:	e4 0b       	sbc	r30, r20
 92a:	f5 0b       	sbc	r31, r21

0000092c <__udivmodsi4_ep>:
 92c:	66 1f       	adc	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	1a 94       	dec	r1
 936:	69 f7       	brne	.-38     	; 0x912 <__udivmodsi4_loop>
 938:	60 95       	com	r22
 93a:	70 95       	com	r23
 93c:	80 95       	com	r24
 93e:	90 95       	com	r25
 940:	9b 01       	movw	r18, r22
 942:	ac 01       	movw	r20, r24
 944:	bd 01       	movw	r22, r26
 946:	cf 01       	movw	r24, r30
 948:	08 95       	ret

0000094a <__umulhisi3>:
 94a:	a2 9f       	mul	r26, r18
 94c:	b0 01       	movw	r22, r0
 94e:	b3 9f       	mul	r27, r19
 950:	c0 01       	movw	r24, r0
 952:	a3 9f       	mul	r26, r19
 954:	70 0d       	add	r23, r0
 956:	81 1d       	adc	r24, r1
 958:	11 24       	eor	r1, r1
 95a:	91 1d       	adc	r25, r1
 95c:	b2 9f       	mul	r27, r18
 95e:	70 0d       	add	r23, r0
 960:	81 1d       	adc	r24, r1
 962:	11 24       	eor	r1, r1
 964:	91 1d       	adc	r25, r1
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
